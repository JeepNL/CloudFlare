@inject IAuthService AuthService

@if (load)
{
	<CascadingAuthenticationState>
		<Router AppAssembly="@typeof(Program).Assembly">
			<Found Context="routeData">
				<AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
					<NotAuthorized>
						@if (!context.User.Identity.IsAuthenticated)
						{
							<RedirectToLogin />
						}
						else
						{
							<MudText>You are not authorized to access this resource.</MudText>
						}
					</NotAuthorized>
					<Authorizing>
						<MudText>Authorizing ..</MudText>
					</Authorizing>
				</AuthorizeRouteView>
			</Found>
			<NotFound>
				<LayoutView Layout="@typeof(MainLayout)">
					<MudText>Sorry, there's nothing at this address.</MudText>
				</LayoutView>
			</NotFound>
		</Router>
	</CascadingAuthenticationState>
}

@code {
	bool load = false;

	protected override async Task OnInitializedAsync()
	{
		UserModel validateUser = new();

		// #TODO (INIT) Refresh Token, see AuthService.cs
		// check if expired authToken exists
		validateUser = await AuthService.ValidateAuth();
		if (!validateUser.IsAuthenticated && !string.IsNullOrEmpty(validateUser.Email))
			await AuthService.Logout();
		load = true;
	}
}
