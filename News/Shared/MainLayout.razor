@using System.Text.Json;
@inherits LayoutComponentBase
@inject GrpcChannel grpcChannel
@*@inject ILocalStorageService localStorageServiceAsync*@
@inject ISyncLocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserStateService userStateService

<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>

<MudThemeProvider Theme="currentTheme" />
<MudSnackbarProvider />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Dense="true" Elevation="12">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
        <MudText Color="Color.Inherit" Typo="Typo.h6">BlazorBits Reloaded</MudText>
        <MudSpacer />
        <MudMenu Class="pa-0 ma-0" Direction="Direction.Right" OffsetY="true" Dense="true">
            <ActivatorContent>
                <MudIcon Icon="@Icons.Material.Filled.MoreVert" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-7 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="ChangeTheme">Light/Dark</MudButton>
                </MudMenuItem>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-4 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"
                               Link="https://github.com/JeepNL/CloudFlare/" Target="_blank">GitHub Repo</MudButton>
                </MudMenuItem>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-6 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit"
                               Link="https://twitter.com/J_aa_p" Target="_blank">Contact me</MudButton>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="drawerOpen" Elevation="12" ClipMode="DrawerClipMode.Docked" Variant="@DrawerVariant.Responsive" Color="Color.Default">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Style="max-width: 100%">
            <CascadingValue Value="cookieModel">
                @Body
            </CascadingValue>
            <Logos Dark="@(bbThemeCkVal == "dark")" />
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    MudTheme currentTheme = new MudTheme();
    CookieModel cookieModel = new();
    bool drawerOpen = true;
    string cookieModelVersion = "v1";
    string bbThemeCkVal = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        currentTheme.Palette = DefaultTheme.DefaultPalette();
        bbThemeCkVal = localStorageService.GetItemAsString("bb_theme");
        if (!string.IsNullOrEmpty(bbThemeCkVal))
            currentTheme.Palette = (bbThemeCkVal == "dark") ? DarkTheme.DarkPalette() : DefaultTheme.DefaultPalette();
        else
        {
            bbThemeCkVal = "light";
            localStorageService.SetItemAsString("bb_theme", "light");
        }
        currentTheme.Typography = Design.MultiTypography("Ubuntu");
        currentTheme.LayoutProperties.DrawerWidthLeft = "220px";

        bool bbStateCookieExists = false;
        cookieModel.Session = Guid.NewGuid().ToString();
        string bbStateCookie = localStorageService.GetItemAsString("bb_state");
        if (!string.IsNullOrEmpty(bbStateCookie))
        {
            cookieModel = JsonSerializer.Deserialize<CookieModel>(bbStateCookie);
            if (cookieModel != null && !
                string.IsNullOrEmpty(cookieModel.Version) &&
                cookieModel.Version == cookieModelVersion &&
                !string.IsNullOrEmpty(cookieModel.State))
            {
                bbStateCookieExists = true;
                //var autherClient = new Auther.AutherClient(grpcChannel);
                //UserState userStateString = new() { UserStateIO = cookieModel.State };
                //NameResponse nameResponse = await autherClient.GetNameAsync(userStateString);
                //cookieModel.Name = nameResponse.Name ?? string.Empty;
            }
        }

        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        bool auth = (authState.User.Identity.IsAuthenticated) ? true : false;
        var loggerClient = new Lggr.LggrClient(grpcChannel);
        Log logModel = new()
        {
            Se = cookieModel.Session,
            Request = "Init",
            Em = string.IsNullOrEmpty(cookieModel.Name) ? string.Empty : Utils.FromB64(cookieModel.Name),
            Authenticated = auth,
            CookieExists = bbStateCookieExists,
            Success = true,
            ActionEnum = ApiGrpc.Protos.Action.System
        };
        PostResponse postResponse = await loggerClient.PostAsync(logModel);
        cookieModel.Id = postResponse.If ?? string.Empty;
        cookieModel.State = postResponse.State ?? string.Empty;
        cookieModel.Version = cookieModelVersion;
        cookieModel.Auth = auth;

        userStateService.OnChange += UserStateChanged;
        userStateService.UserStateArray = Utils.FillUserStateArray(
            cookieModel.Auth.ToString(),
            Utils.FromB64(cookieModel.Name),
            cookieModel.First,
            cookieModel.Last);
    }

    private void ChangeTheme()
    {
        bbThemeCkVal = (bbThemeCkVal == "light") ? "dark" : "light";
        currentTheme.Palette = (bbThemeCkVal == "light") ? DefaultTheme.DefaultPalette() : DarkTheme.DarkPalette();
        localStorageService.SetItemAsString("bb_theme", bbThemeCkVal);
    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private void UserStateChanged()
    {
        string Auth = userStateService.UserStateArray.GetValue(0).ToString();
        string Name = userStateService.UserStateArray.GetValue(1).ToString();
        string First = userStateService.UserStateArray.GetValue(2).ToString();
        string Last = userStateService.UserStateArray.GetValue(3).ToString();

        if (!string.IsNullOrEmpty(Auth))
            cookieModel.Auth = Convert.ToBoolean(Auth);
        if (!string.IsNullOrEmpty(Name))
            cookieModel.Name = Utils.ToB64(Name);
        cookieModel.First = First;
        cookieModel.Last = Last;

        localStorageService.SetItemAsString("bb_state", JsonSerializer.Serialize(cookieModel));
        StateHasChanged();
    }
}
