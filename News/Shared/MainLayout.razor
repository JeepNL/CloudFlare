@using System.Text.Json;
@inherits LayoutComponentBase
@inject GrpcChannel grpcChannel
@inject ISyncLocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserCookieService userCookieService

<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>

<MudThemeProvider Theme="currentTheme" />
<MudSnackbarProvider />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Dense="true" Elevation="12">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
        <MudText Color="Color.Inherit" Typo="Typo.h6">BlazorBits Reloaded</MudText>
        <MudSpacer />
        <MudMenu Class="pa-0 ma-0" Direction="Direction.Right" OffsetY="true" Dense="true">
            <ActivatorContent>
                <MudIcon Icon="@Icons.Material.Filled.MoreVert" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-7 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="ChangeTheme">Light/Dark</MudButton>
                </MudMenuItem>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-4 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit"
                               Link="https://github.com/JeepNL/CloudFlare/" Target="_blank">GitHub Repo</MudButton>
                </MudMenuItem>
                <MudMenuItem Class="pa-0 ma-0">
                    <MudButton Class="pl-4 pr-6 py-1 ma-0" Style="text-transform:none" Variant="Variant.Text"
                               StartIcon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit"
                               Link="https://twitter.com/J_aa_p" Target="_blank">Contact me</MudButton>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="drawerOpen" Elevation="12" ClipMode="DrawerClipMode.Docked" Variant="@DrawerVariant.Responsive" Color="Color.Default">
        <MudNavMenu>
            <MudNavLink Class="mt-3" Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Href="/blogger" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Outlined.Article">Blogger</MudNavLink>
            <MudNavLink Href="/weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Outlined.WbSunny">Weather</MudNavLink>
            <MudNavLink Href="/greeter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.WavingHand">Greeter</MudNavLink>
            @*<MudNavLink Href="/twitter" Match="NavLinkMatch.Prefix" Icon="@Icons.Custom.Brands.Twitter">Twitter</MudNavLink>*@
            <AuthorizeView Roles="Administrator">
                <Authorized>
                    <MudNavLink Href="/admin/filer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FileUpload">Filer</MudNavLink>
                    <MudNavLink Href="/admin/themer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ColorLens">Themer</MudNavLink>
                    <MudNavLink Href="/admin/loggr" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.EventNote">Logger</MudNavLink>
                    <MudNavLink Href="/admin/tester" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.EventNote">Tester</MudNavLink>
                </Authorized>
            </AuthorizeView>
            <MudDivider Class="mt-4 mb-4" />
            <AuthorizeView>
                <NotAuthorized>
                    <MudNavLink Href="/auth/login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
                    <MudNavLink Href="/auth/register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.HowToReg">Register</MudNavLink>
                </NotAuthorized>
                <Authorized>
                    <MudNavLink Href="/auth/account" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ManageAccounts">Account</MudNavLink>
                    <MudNavLink Href="/auth/logout" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Logout">Logout</MudNavLink>
                </Authorized>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Style="max-width: 100%">
            <CascadingValue Value="userStateModel">
                <CascadingValue Value="userCookieModel">
                    <div style="margin-top: 1.2em">
                        @Body
                    </div>
                </CascadingValue>
            </CascadingValue>
            <Logos Dark="@(userCookieModel.Theme == "dark")" />
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme currentTheme = new MudTheme();
    private UserCookieModel userCookieModel = new();
    private UserStateModel userStateModel = new();
    private bool drawerOpen = true;
    private string cookieModelVersion = "v3";

    protected override async Task OnInitializedAsync()
    {
        currentTheme.Typography = Design.MultiTypography("Ubuntu");
        currentTheme.LayoutProperties.DrawerWidthLeft = "220px";

        userCookieModel.Theme = "light";
        userCookieModel.Session = Guid.NewGuid().ToString();
        string bbStateCookie = localStorageService.GetItemAsString("bb_state");
        if (!string.IsNullOrEmpty(bbStateCookie))
        {
            userCookieModel = JsonSerializer.Deserialize<UserCookieModel>(bbStateCookie);
            if (userCookieModel != null &&
                    !string.IsNullOrEmpty(userCookieModel.Version) &&
                    userCookieModel.Version == cookieModelVersion &&
                    !string.IsNullOrEmpty(userCookieModel.Theme))
                currentTheme.Palette = (userCookieModel.Theme == "dark") ? DarkTheme.DarkPalette() : DefaultTheme.DefaultPalette();
            else
                currentTheme.Palette = DefaultTheme.DefaultPalette();
        }
        else
            currentTheme.Palette = DefaultTheme.DefaultPalette();

        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        bool auth = (authState.User.Identity.IsAuthenticated) ? true : false;
        var loggerClient = new Lggr.LggrClient(grpcChannel);
        Log logModel = new()
            {
                Se = userCookieModel.Session,
                Request = "Init",
                Em = (auth) ? Utils.FromB64(authState.User.Identity.Name) : string.Empty,
                Authenticated = auth,
                CookieExists = !string.IsNullOrEmpty(bbStateCookie),
                Success = true, // #TODO - refactor.
                ActionEnum = ApiGrpc.Protos.Action.System
            };
        PostResponse postLogResponse = await loggerClient.PostAsync(logModel);

        userStateModel.Authenticated = logModel.Authenticated;
        userStateModel.Session = userCookieModel.Session;
        userStateModel.Email = logModel.Em;
        //userStateModel.FirstName = logModel.Em;
        userStateModel.IpAddress = postLogResponse.If;

        userCookieService.OnChange += UserCookieChanged;

        userCookieModel.Version = cookieModelVersion;
        userCookieModel.Authenticated = userStateModel.Authenticated;
        userCookieService.UserCookieModelJson = JsonSerializer.Serialize(userCookieModel);
    }

    private void ChangeTheme()
    {
        userCookieModel.Theme = (userCookieModel.Theme == "light") ? "dark" : "light";
        currentTheme.Palette = (userCookieModel.Theme == "light") ? DefaultTheme.DefaultPalette() : DarkTheme.DarkPalette();
        userCookieService.UserCookieModelJson = JsonSerializer.Serialize(userCookieModel);
    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private void UserCookieChanged()
    {
        localStorageService.SetItemAsString("bb_state", userCookieService.UserCookieModelJson);
        StateHasChanged();
    }
}
