@using System.Text.Json;
@using System.Security.Claims
@inherits LayoutComponentBase
@inject GrpcChannel grpcChannel
@inject ISyncLocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudScrollToTop>
	<MudFab Color="Color.Primary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>

<MudThemeProvider Theme="currentTheme" />
<MudSnackbarProvider />
<MudDialogProvider />

<MudLayout>
	<MudAppBar Dense="true" Elevation="12">
		<MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
		<MudText Color="Color.Inherit" Typo="Typo.h6">BlazorBits Reloaded</MudText>
		<MudSpacer />
		<MudMenu Direction="Direction.Right" OffsetY="true">
			<ActivatorContent>
				<MudIcon Icon="@Icons.Material.Filled.MoreVert" />
			</ActivatorContent>
			<ChildContent>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="ChangeTheme">Light/Dark</MudButton>
				</MudMenuItem>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/JeepNL/CloudFlare/" Target="_blank">GitHub Repo</MudButton>
				</MudMenuItem>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit" Link="https://twitter.com/J_aa_p" Target="_blank">Contact me</MudButton>
				</MudMenuItem>
			</ChildContent>
		</MudMenu>
	</MudAppBar>
	<MudDrawer @bind-Open="drawerOpen" Elevation="12" ClipMode="DrawerClipMode.Docked" Variant="@DrawerVariant.Responsive" Color="Color.Default">
		<NavMenu />
	</MudDrawer>
	<MudMainContent>
		<MudContainer Style="max-width: 100%">
			@Body
			<Logos Dark="@dark" />
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
	MudTheme currentTheme = new MudTheme();
	bool drawerOpen = true;
	bool dark = false;
	string cookie = string.Empty;
	CookieModel cookieModel = new();

	protected override void OnInitialized()
	{
		cookie = localStorage.GetItemAsString("bb_state");
		if (string.IsNullOrEmpty(cookie))
		{
			currentTheme.Palette = DefaultTheme.DefaultPalette();
			cookieModel.Theme = "light";
		}
		else
		{
			cookieModel = JsonSerializer.Deserialize<CookieModel>(localStorage.GetItemAsString("bb_state"));
			if (cookieModel.Theme == "light")
				currentTheme.Palette = DefaultTheme.DefaultPalette();
			else
			{
				currentTheme.Palette = DarkTheme.DarkPalette();
				dark = true;
			}
		}
		currentTheme.Typography = Design.MultiTypography("Ubuntu");
		currentTheme.LayoutProperties.DrawerWidthLeft = "220px";
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			string name = string.Empty;
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;
			if (user.Identity.IsAuthenticated)
			{
				_claims = user.Claims;
				name = Utils.FromB64(user.FindFirst(System.Security.Claims.ClaimTypes.Name).Value);
			}
			else if (!string.IsNullOrEmpty(cookie))
			{
				// #TODO edit statestring in cookie.
				UserState userState = new()
				{
					CookieStateString = cookieModel.State
				};
				var autherClient = new Auther.AutherClient(grpcChannel);
				StateResponse stateResponse = await autherClient.GetUserAsync(userState);
				name = stateResponse.Name;
			}

			Guid newGuid = Guid.NewGuid();
			Log logModel = new()
			{
				Session = newGuid.ToString(),
				Request = "Init",
				Name = name,
				Authenticated = user.Identity.IsAuthenticated,
				CookieExists = string.IsNullOrEmpty(cookie) ? false : true,
				Success = true,
				ActionEnum = ApiGrpc.Protos.Action.System
			};

			var loggerClient = new Lggr.LggrClient(grpcChannel);
			PostResponse postResponse = await loggerClient.PostAsync(logModel);

			// if cookie exists or not, set a new one with different session id (init)
			cookieModel.Session = logModel.Session;
			cookieModel.State = postResponse.Status;
			localStorage.SetItemAsString("bb_state", JsonSerializer.Serialize(cookieModel));
		}
	}

	private void ChangeTheme()
	{
		dark = !dark;
		currentTheme.Palette = (dark) ? DarkTheme.DarkPalette() : DefaultTheme.DefaultPalette();
		currentTheme.Typography = Design.MultiTypography("Ubuntu");
		currentTheme.LayoutProperties.DrawerWidthLeft = "220px";

		cookieModel.Theme = "dark";

		if (dark)
			cookieModel.Theme = "dark";
		else
			cookieModel.Theme = "light";

		localStorage.SetItemAsString("bb_state", JsonSerializer.Serialize(cookieModel));
	}

	void DrawerToggle()
	{
		drawerOpen = !drawerOpen;
	}
}
