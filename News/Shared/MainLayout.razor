@inherits LayoutComponentBase
@inject GrpcChannel grpcChannel
@inject IApiClientService _apiClientService;
@inject ISyncLocalStorageService localStorage

<MudScrollToTop>
	<MudFab Color="Color.Primary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>

<MudThemeProvider Theme="currentTheme" />
<MudSnackbarProvider />
<MudDialogProvider />

<MudLayout>
	<MudAppBar Dense="true" Elevation="12">
		<MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
		<MudText Color="Color.Inherit" Typo="Typo.h6">BlazorBits Reloaded</MudText>
		<MudSpacer />
		<MudMenu Direction="Direction.Right" OffsetY="true">
			<ActivatorContent>
				<MudIcon Icon="@Icons.Material.Filled.MoreVert" />
			</ActivatorContent>
			<ChildContent>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="ChangeTheme">Light/Dark</MudButton>
				</MudMenuItem>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/JeepNL/CloudFlare/" Target="_blank">GitHub Repo</MudButton>
				</MudMenuItem>
				<MudMenuItem>
					<MudButton Class="ma-0 pl-1 py-0 pr-0" Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Custom.Brands.Twitter" Color="Color.Inherit" Link="https://twitter.com/J_aa_p" Target="_blank">Contact me</MudButton>
				</MudMenuItem>
			</ChildContent>
		</MudMenu>
	</MudAppBar>
	<MudDrawer @bind-Open="drawerOpen" Elevation="12" ClipMode="DrawerClipMode.Docked" Variant="@DrawerVariant.Responsive" Color="Color.Default">
		<NavMenu />
	</MudDrawer>
	<MudMainContent>
		<MudContainer Style="max-width: 100%">
			@Body
			<Logos Dark="@dark" />
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	MudTheme currentTheme = new MudTheme();
	bool drawerOpen = true;
	bool dark = false;

	protected override void OnInitialized()
	{
		string theme = localStorage.GetItemAsString("bb_theme");
		if (!string.IsNullOrEmpty(theme))
		{
			if (theme == "light")
				currentTheme.Palette = DefaultTheme.DefaultPalette();
			else
			{
				currentTheme.Palette = DarkTheme.DarkPalette();
				dark = true;
			}
		}
		else
			currentTheme.Palette = DefaultTheme.DefaultPalette();

		currentTheme.Typography = Design.MultiTypography("Ubuntu");
		currentTheme.LayoutProperties.DrawerWidthLeft = "220px";
	}

	//protected override async Task OnAfterRenderAsync(bool firstRender)
	//{
	//	if (firstRender)
	//	{
	//		IPAddress2 ipAddress = await _apiClientService.GetUserIPAsync();
	//		Log logModel = new()
	//		{
	//			Session = 0, // #TODO (StateService)
	//			Uid = string.Empty, // #TODO
	//			Rem = ipAddress.IP,
	//			Desc = "INIT: MainLayout",
	//			Success = (ipAddress.IP.Substring(0, 6) == "Error:" ? false : true),
	//			Date = DateTimeOffset.UtcNow.Ticks,
	//			ActionEnum = ApiGrpc.Protos.Action.System
	//		};
	//		var client = new Lggr.LggrClient(grpcChannel);
	//		PostResponse postResponse = await client.PostAsync(logModel);
	//	}
	//}

	private void ChangeTheme()
	{
		dark = !dark;
		currentTheme.Palette = (dark) ? DarkTheme.DarkPalette() : DefaultTheme.DefaultPalette();
		currentTheme.Typography = Design.MultiTypography("Ubuntu");
		currentTheme.LayoutProperties.DrawerWidthLeft = "220px";

		if (dark)
			localStorage.SetItemAsString("bb_theme", "dark");
		else
			localStorage.SetItemAsString("bb_theme", "light");
	}

	void DrawerToggle()
	{
		drawerOpen = !drawerOpen;
	}
}
