@using FluentValidation
@inject GrpcChannel grpcChannel

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" @bind-Value="postModel.Header" Label="Header" HelperText="Required" Required="true" Validation="@header.Validation" Immediate="true" />
            <MudTextField T="string" @bind-Value="postModel.SubHeader" Label="Subheader" Validation="@subheader.Validation" Immediate="true" />
            <MudTextField T="string" @bind-Value="postModel.Content" Label="Content" HelperText="Required" Required="true" Lines="10" Validation="@content.Validation" Immediate="true" />
            <div class="d-flex">
                <MudTextField T="string" @bind-Value="postModel.ImageUrl" Label="Image Url" Placeholder="https://" Variant="Variant.Filled" Margin="Margin.Dense" Validation="@url.Validation" Immediate="true" />
                &nbsp;&nbsp;<MudTextField T="string" @bind-Value="postModel.MoreInfoUrl" Label="More Info Url" Placeholder="https://" Margin="Margin.Dense" Variant="Variant.Filled" Validation="@url.Validation" Immediate="true" />
            </div>
        </MudForm>

    </DialogContent>
    <DialogActions>
        @if (postModel.Id != 0)
        {
            <MudTooltip Text="Delete">
                <MudElement>
                    <MudIconButton OnClick="@ToggleDeleteOpen" Size="Size.Large" Icon="@Icons.Material.Filled.Delete" Style="@($"color:{Colors.Red.Default};")"></MudIconButton>
                    <MudPopover Open="@_DeleteIsOpen" Class="d-flex pa-3 ma-3" Style="width:94px;">
                        <MudIconButton Class="ma-0 pa-0" OnClick="@ToggleDeleteOpen" Size="Size.Large" Title="Cancel" Icon="@Icons.Material.Filled.Cancel" Style="@($"color:{Colors.Orange.Default};")"></MudIconButton>
                        <MudIconButton Class="ma-0 pa-0" OnClick="DeleteBlogPost" Size="Size.Large" Title="Delete" Icon="@Icons.Material.Filled.Delete" Style="@($"color:{Colors.Red.Default};")"></MudIconButton>
                    </MudPopover>
                </MudElement>
            </MudTooltip>
        }
        <MudTooltip Text="Cancel">
            <MudIconButton OnClick="Cancel" Size="Size.Large" Icon="@Icons.Material.Filled.Cancel" Style="@($"color:{Colors.Orange.Default};")" Disabled="_DeleteIsOpen"></MudIconButton>
        </MudTooltip>
        <MudTooltip Text="Save">
            <MudIconButton OnClick="SubmitForm" Size="Size.Large" Icon="@Icons.Material.Filled.CheckCircle" Style="@($"color:{Colors.Green.Default};")" Disabled="_DeleteIsOpen"></MudIconButton>
        </MudTooltip>
    </DialogActions>
</MudDialog>

<MudOverlay Visible="_DeleteIsOpen" DarkBackground="true" Absolute="true"></MudOverlay>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public string Header { get; set; } = string.Empty;
    [Parameter] public string SubHeader { get; set; } = string.Empty;
    [Parameter] public string Content { get; set; } = string.Empty;
    [Parameter] public string ImageUrl { get; set; } = string.Empty;
    [Parameter] public string MoreInfoUrl { get; set; } = string.Empty;

    bool success;
    bool _DeleteIsOpen;
    string[] errors = { };
    MudForm form;
    Post postModel;

    protected override void OnInitialized()
    {
        postModel = new()
        {
            Id = 0,
            Header = string.Empty,
            SubHeader = string.Empty,
            Content = string.Empty,
            ImageUrl = string.Empty,
            MoreInfoUrl = string.Empty,
            DatePublished = DateTime.UtcNow.Ticks,
            AuthorId = "0", // temporary
            StatusEnum = Post.Types.Status.Published, // #TODO
            ActionEnum = Post.Types.Action.Insert // Insert = default
        };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Id != 0) // update
        {
            postModel.Id = Id;
            postModel.Header = Header;
            postModel.SubHeader = SubHeader;
            postModel.Content = Content;
            postModel.ImageUrl = ImageUrl;
            postModel.MoreInfoUrl = MoreInfoUrl;
            postModel.ActionEnum = Post.Types.Action.Update; // if update change postModel.ActionEnum
        }
    }

    private async Task SubmitForm()
    {
        form.Validate();
        if (success)
        {
            var client = new Blogger.BloggerClient(grpcChannel);
            ResultResponse serverReply = await client.SubsertPostAsync(postModel);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async Task DeleteBlogPost()
    {
        postModel.ActionEnum = Post.Types.Action.SoftDelete;
        postModel.StatusEnum = Post.Types.Status.Deleted;
        var client = new Blogger.BloggerClient(grpcChannel);
        ResultResponse serverReply = await client.SubsertPostAsync(postModel);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private void ToggleDeleteOpen()
    {
        if (_DeleteIsOpen)
            _DeleteIsOpen = false;
        else
            _DeleteIsOpen = true;
    }

    private FluentValueValidator<string> header = new FluentValueValidator<string>(x => x.NotEmpty().WithMessage("Required").Length(1, 80).WithMessage("Max. 80 chars."));
    private FluentValueValidator<string> subheader = new FluentValueValidator<string>(x => x.Length(0, 120).WithMessage("Max. 120 chars."));
    private FluentValueValidator<string> content = new FluentValueValidator<string>(x => x.NotEmpty().WithMessage("Required").Length(1, 1024 * 8).WithMessage("Max. 8k chars."));
    private FluentValueValidator<string> url = new FluentValueValidator<string>(x => x.Length(0, 200).WithMessage("Max. 200 chars."));
}