@inject GrpcChannel grpcChannel
@inject IDialogService DialogService

<MudDialog DisableSidePadding="true">
	<DialogContent>
		<MudGrid>
			<MudItem xs="12" Class="mx-4 d-flex">
				<MudText Typo="Typo.h6" Color="Color.Primary">@title</MudText>
				<MudSpacer />
				<MudMenu Direction="Direction.Right" OffsetY="true" Dense="true">
					<ActivatorContent>
						<MudIcon Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" />
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem>
							<MudButton Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Primary" Color="Color.Inherit" OnClick="SubmitForm">Save</MudButton>
						</MudMenuItem>
						<MudMenuItem>
							<MudButton Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Inherit" Color="Color.Inherit" OnClick="Cancel">Close</MudButton>
						</MudMenuItem>
						@if (postModel.Id != 0)
						{
							<MudMenuItem>
								<MudButton Style="text-transform:none" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Tertiary" Color="Color.Inherit" OnClick="DeleteDialog">Delete</MudButton>
							</MudMenuItem>
						}
					</ChildContent>
				</MudMenu>
			</MudItem>
		</MudGrid>
		<MudDivider Class="my-2" />
		<MudContainer Style="max-height: 460px; overflow-y: scroll">
			<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
				<MudFocusTrap Disabled="postModel.Id != 0" DefaultFocus="DefaultFocus">
					<MudTextField Class="mt-4" T="string" @bind-Value="postModel.Header" Label="Header" Required="true" Validation="@Utils.FluentValidate(80, true, "Header", 10).Validation" Immediate="true" />
				</MudFocusTrap>
				<MudTextField Class="mt-4" T="string" @bind-Value="postModel.SubHeader" Label="Subheader" Validation="@Utils.FluentValidate(128, false, "Subheader").Validation" Immediate="true" />
				<MudTextField Class="mt-4" T="string" @bind-Value="postModel.Content" Label="Content" Required="true" Lines="4" Validation="@Utils.FluentValidate(8192, true, "Content", 10).Validation" Immediate="true" />
				<MudGrid Class="mt-1 mb-0">
					<MudItem xs="12" md="6">
						<MudTextField T="string" @bind-Value="postModel.ImageUrl" Label="Image Url" Placeholder="https://" Validation="@Utils.FluentValidate(256, false, "Image URL").Validation" Immediate="true" />
					</MudItem>
					<MudItem xs="12" md="6">
						<MudTextField T="string" @bind-Value="postModel.MoreInfoUrl" Label="More Info Url" Placeholder="https://" Validation="@Utils.FluentValidate(256, false, "More Info URL").Validation" Immediate="true" />
					</MudItem>
				</MudGrid>
			</MudForm>
		</MudContainer>
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }
	[Parameter] public int Id { get; set; }
	[Parameter] public string Header { get; set; }
	[Parameter] public string SubHeader { get; set; }
	[Parameter] public string Content { get; set; }
	[Parameter] public string ImageUrl { get; set; }
	[Parameter] public string MoreInfoUrl { get; set; }

	MudForm form;
	Post postModel;
	DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;
	bool success = false;
	string[] errors = { }; // not used yet
	string title = string.Empty;

	protected override void OnInitialized()
	{
		postModel = new()
		{
			Id = 0,
			Header = string.Empty,
			SubHeader = string.Empty,
			Content = string.Empty,
			ImageUrl = string.Empty,
			MoreInfoUrl = string.Empty,
			DatePublished = DateTime.UtcNow.Ticks,
			AuthorId = "0", // temporary
			StatusEnum = Post.Types.Status.Published, // #TODO
			ActionEnum = Post.Types.Action.Insert // Insert = default
		};
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if (Id != 0) // Update
		{
			title = "Edit Blog Post";
			postModel.Id = Id;
			postModel.Header = Header;
			postModel.SubHeader = SubHeader;
			postModel.Content = Content;
			postModel.ImageUrl = ImageUrl;
			postModel.MoreInfoUrl = MoreInfoUrl;
			postModel.ActionEnum = Post.Types.Action.Update; // if update change postModel.ActionEnum
		}
		else
			title = "Add Blog Post";
	}

	private async Task SubmitForm()
	{
		form.Validate();
		if (success)
		{
			// Anything changed?
			if (postModel.Header != Header ||
				postModel.SubHeader != SubHeader ||
				postModel.Content != Content ||
				postModel.ImageUrl != ImageUrl ||
				postModel.MoreInfoUrl != MoreInfoUrl)
			{
				var client = new Blogger.BloggerClient(grpcChannel);
				ResultResponse serverReply = await client.SubsertPostAsync(postModel);
				MudDialog.Close(DialogResult.Ok(serverReply.Message));
			}
			else // No changes
				Cancel();
		}
	}

	private async void DeleteDialog()
	{
		bool? result = await DialogService.ShowMessageBox(
			"Delete Blog Post?",
			"This action can not be undone.",
			yesText: "YES",
			cancelText: "NO"
		);

		if (result is not null)
			await DeleteBlogPost();
	}

	private async Task DeleteBlogPost()
	{
		postModel.ActionEnum = Post.Types.Action.SoftDelete;
		postModel.StatusEnum = Post.Types.Status.Deleted;
		var client = new Blogger.BloggerClient(grpcChannel);
		ResultResponse serverReply = await client.SubsertPostAsync(postModel);
		MudDialog.Close(DialogResult.Ok(serverReply.Message));
	}

	private void Cancel() => MudDialog.Cancel();
}
