@page "/fetchdata"
@inject GrpcChannel grpcChannel

<MudContainer Style="max-width: 100%">
    <MudText Typo="Typo.h4">Weather forecast</MudText>
    <MudText Class="mb-6" Typo="Typo.subtitle1">This component demonstrates fetching (<i>random!</i>) gRPC data from a remote server.</MudText>
    @if (forecasts == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Temp. (C)</MudTh>
                <MudTh>Temp. (F)</MudTh>
                <MudTh>Summary</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@DateTime.Parse(context.Date.ToString().Replace("\"", "")).ToLocalTime()</MudTd>
                <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
                <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
                <MudTd DataLabel="Summary">@context.Summary</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private IList<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        var client = new WeatherForecasts.WeatherForecastsClient(grpcChannel);
        forecasts = (await client.GetWeatherForecastsAsync(new Empty())).Forecasts;
    }
}
