@page "/auth/reset/{ResetGuid}/{ResetEmail}/"
@page "/auth/reset/error/{ResetError}/"
@using System.Text.RegularExpressions
@inject GrpcChannel grpcChannel
@inject NavigationManager NavMan
@inject ClipboardService clipboardService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4">Password Reset</MudText>
<MudText Class="mb-4" Typo="Typo.subtitle1">Create a new password</MudText>

<div style="max-width: 340px;">
	@if (loading)
	{
		<MudAlert Class="mb-6 mt-4" Severity="Severity.Info" Variant="Variant.Filled">Please wait ...</MudAlert>
	}
	else
	{
		if (!string.IsNullOrEmpty(resetError))
		{
			<MudAlert Class="mb-6 mt-4" Severity="Severity.Error" Variant="Variant.Filled">@resetError</MudAlert>
		}
		else
		{
			<MudCard>
				<MudCardContent>
					<MudForm @ref="form" @bind-IsValid="@formValidated">
						@*<MudTextField Class="mb-3" T="string" @bind-Value="resetPasswordUser.Email" Label="Email" Disabled="true" autocomplete="email" HelperText="You can't change your email address now" />*@
						<MudTextField Class="mb-3" @ref="pwField" T="string" @bind-Value="resetPasswordUser.Password" Label="New Password" HelperText="Choose a strong password"
							  InputType="passwordInput"
							  Required="true" RequiredError="Password is required!"
							  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
							  Adornment="Adornment.End"
							  AdornmentIcon="@passwordInputIcon"
							  OnAdornmentClick="ShowPassword" autocomplete="new-password" />
						<MudTextField Class="mb-2" T="string" @bind-Value="repeatPassword" Label="Repeat password"
							  InputType="passwordInput"
							  Validation="@(new Func<string, string>(PasswordMatch))" autocomplete="new-password" />
					</MudForm>
				</MudCardContent>
				<MudCardActions>
					<MudButton title="Generate a strong password." OnClick="GeneratePassword" Disabled="@(!isGeneratePasswordVisible)" Variant="Variant.Text" Color="Color.Primary" Style="text-transform:none">Generate password</MudButton>
					<MudButton Class="mt-2 ml-auto" OnClick="SubmitForm" Variant="Variant.Filled" Color="Color.Primary">Reset</MudButton>
				</MudCardActions>
			</MudCard>
		}
	}
</div>

@code {
	[Parameter] public string ResetEmail { get; set; } = string.Empty;
	[Parameter] public string ResetGuid { get; set; } = string.Empty;
	[Parameter] public string ResetError { get; set; } = string.Empty;

	MudForm form;
	AutherUser resetPasswordUser;
	MudTextField<string> pwField;
	InputType passwordInput = InputType.Password;

	bool loading = true;
	bool formValidated = false;
	bool isPasswordVisible = false;
	bool isGeneratePasswordVisible = true;
	string passwordInputIcon = Icons.Material.Filled.VisibilityOff;
	string repeatPassword = string.Empty;
	string resetError = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		// error after reset
		if (!string.IsNullOrEmpty(ResetError))
			resetError = ResetError;
		else
		{
			resetPasswordUser = new()
			{
				Email = ResetEmail, // encrypted
				Password = string.Empty,
				Guid = ResetGuid,
				RememberMe = false,
				ActionEnum = AutherUser.Types.Action.ValidatePassword
			};

			var client = new Auther.AutherClient(grpcChannel);
			UserResult serverReply = await client.AuthRpcAsync(resetPasswordUser);
			// error after validate
			if (!serverReply.Success)
				resetError = serverReply.Error;
		}
		loading = false;
	}

	private async Task SubmitForm()
	{
		form.Validate();
		if (formValidated)
		{
			resetPasswordUser.ActionEnum = AutherUser.Types.Action.ResetPassword;
			var client = new Auther.AutherClient(grpcChannel);
			UserResult serverReply = await client.AuthRpcAsync(resetPasswordUser);

			if (!serverReply.Success)
			{
				resetError = serverReply.Error;
				NavMan.NavigateTo($"/auth/reset/error/{resetError}");
			}
			else
			{
				Snackbar.Add("Password reset success.", MudBlazor.Severity.Success);
				NavMan.NavigateTo($"/auth/login/reset");
			}
		}
	}

	private async Task GeneratePassword()
	{
		isGeneratePasswordVisible = false;
		isPasswordVisible = true;
		passwordInputIcon = Icons.Material.Filled.Visibility;
		passwordInput = InputType.Text;
		resetPasswordUser.Password = RandomPassword.Generate();
		repeatPassword = resetPasswordUser.Password;
		await clipboardService.WriteTextAsync(resetPasswordUser.Password);
		Snackbar.Add("The generated password has been<br />copied to your clipboard", MudBlazor.Severity.Success);
		await Task.Delay(2500);
		isGeneratePasswordVisible = true;
	}

	private void ShowPassword()
	{
		if (isPasswordVisible)
		{
			isPasswordVisible = false;
			passwordInputIcon = Icons.Material.Filled.VisibilityOff;
			passwordInput = InputType.Password;
		}
		else
		{
			isPasswordVisible = true;
			passwordInputIcon = Icons.Material.Filled.Visibility;
			passwordInput = InputType.Text;
		}
	}

	private IEnumerable<string> PasswordStrength(string pw)
	{
		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "Password is required";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Use at least 8 characters";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Use at least 1 capital letter";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Use at least 1 lowercase letter";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Use at least 1 digit";
		if (!Regex.IsMatch(pw, @"[~`!@#$€%^&*\-_=+|\\/?><,.:;\(\)\{\}\[\]]"))
			yield return @"Use at least 1 special char like: !@#$€%^&*-_=+?";
	}

	private string PasswordMatch(string arg)
	{
		if (pwField.Value != arg)
			return "Passwords don't match";
		return null;
	}
}
