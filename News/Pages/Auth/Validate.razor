@page "/auth/validate/{ValidateGuid}/{ValidateEmail}/"
@page "/auth/validate/error/{ValidateError}/"
@inject GrpcChannel grpcChannel
@inject NavigationManager NavMan
<PageTitle>@pageTitle</PageTitle>
<HeadContent><meta name="description" content="@pageDesc" /></HeadContent>

<MudText Typo="Typo.h4">New User</MudText>
<MudText Class="mb-4" Typo="Typo.subtitle1">Email address validation</MudText>

<MudGrid>
	<MudItem xs="12" sm="8" md="5" lg="4" xl="3">
		<MudAlert Class="mt-4" Severity="@severity" Variant="Variant.Filled">@validationMessage</MudAlert>
	</MudItem>
</MudGrid>

@code {
	[Parameter] public string ValidateEmail { get; set; } = string.Empty;
	[Parameter] public string ValidateGuid { get; set; } = string.Empty;
	[Parameter] public string ValidateError { get; set; } = string.Empty;

	Severity severity = Severity.Info;

    private string pageTitle = "Email Validation | BlazorBits";
    private string pageDesc = "Validation of the submitted email address";
	private string validationMessage = "Please wait ...";

	protected override async Task OnParametersSetAsync()
	{
		if (!string.IsNullOrEmpty(ValidateError))
		{
			validationMessage = ValidateError;
			severity = Severity.Error;
		}
		else if (!string.IsNullOrEmpty(ValidateGuid) && !string.IsNullOrEmpty(ValidateEmail))
		{
			AutherUser validateUserEmail = new()
			{
				Email = ValidateEmail, // encrypted
				Password = string.Empty,
				EditGuid = ValidateGuid,
				RememberMe = false,
				ActionEnum = AutherUser.Types.Action.Validate
			};

			var client = new Auther.AutherClient(grpcChannel);
			UserResult serverReply = await client.AuthRpcAsync(validateUserEmail);

			if (!serverReply.Success)
				NavMan.NavigateTo($"/auth/validate/error/{serverReply.Error}/");
			else
				NavMan.NavigateTo("/auth/login/welcome/");
		}
		else
			NavMan.NavigateTo("/auth/validate/error/Expired or invalid link./");
	}
}
