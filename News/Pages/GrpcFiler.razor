@page "/filer"
@attribute [Authorize(Policy = Policies.IsAdministrator)]
@inject NavigationManager NavMan
@inject IAuthService AuthService
@inject GrpcChannel grpcChannel

<MudText Typo="Typo.h4">Upload</MudText>
<MudText Class="mb-4" Typo="Typo.subtitle1">Upload an image using a gRPC service</MudText>

<InputFile OnChange="UploadFile" />

@if (ready)
{
	<MudText Typo="Typo.body1">Upload Finished</MudText>
}

<MudDivider Class="my-4" />

<MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="RInfo">Remote Info </MudButton>

<MudText Typo="Typo.body1">Local IP: @iResult.Lc</MudText>
<MudText Typo="Typo.body1">Local Port: @iResult.Lp</MudText>
<MudText Typo="Typo.body1">Remote IP: @iResult.Rm</MudText>
<MudText Typo="Typo.body1">Remote Port: @iResult.Rp</MudText>
<MudText Typo="Typo.body1">Headers: @iResult.Hd</MudText>

@code {
	bool ready = false;
	InfoResult iResult = new()
	{
		Id = 1,
		Ok = true,
		Lc = string.Empty,
		Lp = string.Empty,
		Rm = string.Empty,
		Rp = string.Empty,
		Hd = string.Empty
	};

	//protected override void OnInitialized()
	//{

	//}

	async Task UploadFile(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		string fileName = file.Name;
		int fileSize = (int)file.Size;

		if (fileSize < 1024 * 256) // 256kB
		{
			await using Stream fileStream = file.OpenReadStream(fileSize);
			await using MemoryStream memoryStream = new(fileSize);
			await fileStream.CopyToAsync(memoryStream);
			memoryStream.Position = 0;
			byte[] byteArray = memoryStream.ToArray();
			Google.Protobuf.ByteString contentBytes = Google.Protobuf.ByteString.CopyFrom(byteArray, 0, fileSize);
			BytesContent contentStruct = new()
			{
				Block = 1,
				Content = contentBytes,
				FileName = fileName
			};

			Result result = new();
			Metadata headers = await AuthService.AddMetaDataHeader();
			var client = new Filer.FilerClient(grpcChannel);
			try
			{
				result = await client.UploadAsync(contentStruct, headers);
			}
			catch
			{
				await AuthService.Logout();
				NavMan.NavigateTo("/auth/login");
			}
		}
		else
		{
			Console.WriteLine("Max. image size: 256kB");
		};
		ready = true;
	}

	async Task RInfo()
	{
		AutherInfo aInfo = new()
		{
			Session = 1
		};
		//Metadata headers = await AuthService.AddMetaDataHeader();
		var client = new Auther.AutherClient(grpcChannel);
		//iResult = await client.InfoRpcAsync(aInfo, headers);
		iResult = await client.InfoRpcAsync(aInfo);
	}
}
