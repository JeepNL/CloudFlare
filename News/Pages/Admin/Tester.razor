@page "/admin/tester"
@using System.Text.Json;
@using System.Security.Claims
@using System.Collections
@attribute [Authorize(Policy = Policies.IsAdministrator)]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService localStorageAsync

<MudText Typo="Typo.h4">Tester</MudText>
<MudText Class="mb-4" Typo="Typo.subtitle1">Testing code samples</MudText>

<MudText Class="mb-4" Typo="Typo.body1">Custom Environment Variable: @envCustomVar</MudText>
<MudText Class="mb-4" Typo="Typo.body1">Time Zone Environment Variable: @envTimeZoneVar</MudText>
<MudText Class="mb-4" Typo="Typo.body1">Remote Server Environment Variable: @envRemoteServer</MudText>

<MudText Class="mb-4" Typo="Typo.body1">Claim expiration: @claimExpDt for: @UserStateModel.Email</MudText>

<MudSimpleTable Class="mb-4" Dense="true" Hover="false" Bordered="false" Striped="true" Style="overflow-x: auto;">
    <thead>
        <tr style="color:white; background-color:orangered">
            <th colspan="2">Claims</th>
        </tr>
        <tr style="color:black; background-color:lightgray">
            <th>Key</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var claim in _claims)
        {
            <tr>
                <td>@claim.Type</td>
                <td>@claim.Value</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<MudSimpleTable Class="mb-4" Dense="true" Hover="false" Bordered="false" Striped="true" Style="overflow-x: auto;">
    <thead>
        <tr style="color:white; background-color:orangered">
            <th colspan="2">Cookie Model</th>
        </tr>
        <tr style="color:black; background-color:lightgray">
            <th>Key</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Version</td><td>@UserCookieModel.Version</td></tr>
        <tr><td>Session</td><td>@UserCookieModel.Session</td></tr>
        <tr><td>Auth</td><td>@UserCookieModel.Authenticated</td></tr>
        <tr><td>Theme</td><td>@UserCookieModel.Theme</td></tr>
    </tbody>
</MudSimpleTable>

<MudSimpleTable Class="mb-4" Dense="true" Hover="false" Bordered="false" Striped="true" Style="overflow-x: auto;">
    <thead>
        <tr style="color:white; background-color:orangered">
            <th colspan="2">In Memory User State</th>
        </tr>
        <tr style="color:black; background-color:lightgray">
            <th>Key</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Auth</td><td>@UserStateModel.Authenticated</td></tr>
        <tr><td>Name</td><td>@UserStateModel.Session</td></tr>
        <tr><td>Email</td><td>@UserStateModel.Email</td></tr>
        <tr><td>First</td><td>@UserStateModel.FirstName</td></tr>
        <tr><td>Ip</td><td>@UserStateModel.IpAddress</td></tr>
        <tr><td>Screen</td><td>@UserStateModel.ScreenRes</td></tr>
    </tbody>
</MudSimpleTable>

@code {
    [CascadingParameter]
    protected UserStateModel UserStateModel { get; set; }
    [CascadingParameter]
    protected UserCookieModel UserCookieModel { get; set; }

    IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    DateTimeOffset claimExpDt = default;

    string envCustomVar = string.Empty;
    string envTimeZoneVar = string.Empty;
    string envRemoteServer = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        envTimeZoneVar = Environment.GetEnvironmentVariable("TZ");
        envCustomVar = Environment.GetEnvironmentVariable("BBCUSTOM");
        envCustomVar = Environment.GetEnvironmentVariable("BBREMOTESERVER");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            long claimExpiration = Convert.ToInt64(user.FindFirst(c => c.Type == "exp")?.Value);
            // OR: long claimExpiration2 = Convert.ToInt64(_claims.FirstOrDefault(e => e.Type == "exp")?.Value);
            claimExpDt = DateTimeOffset.FromUnixTimeSeconds(claimExpiration).ToLocalTime();
        }

       Console.WriteLine();
       Console.WriteLine("GetEnvironmentVariables: ");
       foreach (DictionaryEntry de in Environment.GetEnvironmentVariables())
           Console.WriteLine("  {0} = {1}", de.Key, de.Value);
    }
}
