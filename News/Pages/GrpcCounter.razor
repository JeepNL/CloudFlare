@page "/counter"
@inject GrpcChannel grpcChannel
@using System.Threading
@using Grpc.Core

<MudText Typo="Typo.h4">Counter</MudText>
<MudText Class="mb-6" Typo="Typo.subtitle1">Incrementing count streamed from a remote gRPC service.</MudText>
<MudGrid>
    <MudItem>
        <MudPaper Class="px-4 pt-4 pb-0 mb-6 d-flex justify-center">
            <MudText Class="mb-6" Typo="Typo.h1" Color="Color.Secondary"><b>@currentCount</b></MudText>
        </MudPaper>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="IncrementCount" Disabled="@(cts != null)">Start</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="StopCount" Disabled="@(cts == null)">Stop</MudButton>
    </MudItem>
</MudGrid>

@code {
    private int currentCount = 0;
    private CancellationTokenSource cts;

    private async Task IncrementCount()
    {
        cts = new CancellationTokenSource();

        var client = new Counter.CounterClient(grpcChannel); // Count.Counter.CounterClient(Channel);
        using var call = client.StartCounter(new CounterRequest() { Start = currentCount }, cancellationToken: cts.Token);

        try
        {
            await foreach (var message in call.ResponseStream.ReadAllAsync())
            {
                currentCount = message.Count;
                StateHasChanged();
            }
        }
        catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
        {
            // Ignore exception from cancellation
        }
    }

    private void StopCount()
    {
        cts?.Cancel();
        cts = null;
    }
}
